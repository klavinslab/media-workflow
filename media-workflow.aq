{"config":{"title":"Liquid/Agar Media Workflow","description":"Protocol and libraries for making media","copyright":"University of Washington, 2019","version":"0.0.1","authors":[{"name":"Benjamin Keller","affiliation":"University of Washington"},{"name":"Abraham Miller","affilation":"","affiliation":"University of Washington"},{"name":"Eriberto Lopez","affilation":"","affiliation":"University of Washington"},{"name":"Ayesha Saleem","affilation":"","affiliation":"University of Washington"},{"name":"Luana Paleologu","affilation":"","affiliation":"University of Washington"},{"name":"Robert Moseley","affilation":"","affiliation":"Duke University"}],"maintainer":{"name":"Benjamin Keller","email":"bjkeller@uw.edu"},"acknowledgements":null,"github":{"user":"bjkeller","repo":"media-workflow","organization":"klavinslab"},"keywords":["media"],"aquadoc_version":"1.0.0","aquarium_version":"\u003c%= Bioturk::Application.config.aquarium_version %\u003e"},"components":[{"sample_types":[{"id":9,"name":"Media","description":"Media for yeast and E. coli","created_at":"2019-07-25T16:14:39.000-07:00","updated_at":"2019-07-25T16:14:39.000-07:00","field_types":[]}],"object_types":[{"id":36,"name":"1000 mL Agar","description":"1000 mL Agar","min":0,"max":1000,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2019-08-28T08:45:44.000-07:00","updated_at":"2019-08-28T08:45:44.000-07:00","unit":"Media","cost":0.01,"release_method":"return","release_description":"","sample_type_id":9,"image":"","prefix":"","rows":null,"columns":null,"sample_type_name":"Media"},{"id":37,"name":"1000 mL Liquid","description":"1000 mL Liquid","min":0,"max":1000,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2019-08-28T08:46:44.000-07:00","updated_at":"2019-08-28T08:46:44.000-07:00","unit":"Media","cost":0.01,"release_method":"return","release_description":"","sample_type_id":9,"image":"","prefix":"","rows":null,"columns":null,"sample_type_name":"Media"},{"id":38,"name":"500 mL Agar","description":"500 mL Agar","min":0,"max":1000,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2019-08-28T08:47:04.000-07:00","updated_at":"2019-08-28T08:47:04.000-07:00","unit":"Media","cost":0.01,"release_method":"return","release_description":"","sample_type_id":9,"image":"","prefix":"","rows":null,"columns":null,"sample_type_name":"Media"},{"id":39,"name":"500 mL Liquid","description":"500 mL Liquid","min":0,"max":1000,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2019-08-28T08:47:33.000-07:00","updated_at":"2019-08-28T08:47:33.000-07:00","unit":"Media","cost":0.01,"release_method":"return","release_description":"","sample_type_id":9,"image":"","prefix":"","rows":null,"columns":null,"sample_type_name":"Media"}],"operation_type":{"name":"Make Liquid/Agar Media","category":"Reagents","deployed":false,"on_the_fly":false,"field_types":[{"ftype":"sample","role":"output","name":"Media","sample_types":["Media","Media","Media","Media"],"object_types":["1000 mL Agar","1000 mL Liquid","500 mL Agar","500 mL Liquid"],"part":false,"array":false,"routing":"A","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null}],"protocol":"# frozen_string_literal: true\r\n\r\nclass Measure\r\n  include Comparable\r\n\r\n  attr_reader :amount, :unit\r\n\r\n  def initialize(amount:, unit:)\r\n    @amount = amount\r\n    @unit = unit\r\n  end\r\n\r\n  def \u003c=\u003e(other)\r\n    if @unit == other.unit\r\n      if @amount \u003c other.amount\r\n        -1\r\n      elsif @amount \u003e other.amount\r\n        1\r\n      else\r\n        0\r\n      end\r\n    else \r\n      @unit \u003c=\u003e other.unit\r\n    end\r\n  end\r\n\r\n  def to_s\r\n    \"#{amount} #{unit}\"\r\n  end\r\nend\r\n\r\nclass Ingredient\r\n  attr_reader :name, :amount, :directions, :unit\r\n\r\n  def initialize(name:, amount:, unit:, directions:)\r\n    @name = name\r\n    @amount = amount\r\n    @unit = unit\r\n    @directions = directions\r\n  end\r\n  \r\n  def to_s\r\n    @name\r\n  end\r\nend\r\n\r\nclass Media\r\n  attr_reader :sample_name, :bottle, :volume, :unit, :type, :output\r\n  attr_accessor :count\r\n\r\n  def initialize(sample_name:, bottle:, volume:, unit:, type:, count:, output:)\r\n    @sample_name = sample_name\r\n    @bottle = bottle\r\n    @volume = volume\r\n    @unit = unit\r\n    @type = type\r\n    @count = count\r\n    @output = output\r\n  end\r\n  \r\n  def to_s\r\n    @sample_name\r\n  end\r\nend\r\n\r\nclass Recipe\r\n  attr_reader :ingredients\r\n\r\n  def initialize\r\n    @ingredients = []\r\n  end\r\n\r\n  def add(ingredient:)\r\n    @ingredients.push(ingredient)\r\n  end\r\nend\r\n\r\n\r\nclass Protocol\r\n\r\n  def make_media_steps(media_type:, media_vol:, bottle:, num_bottles:, multiplier:, ingredients:)\r\n    \r\n    show do\r\n      title 'Gather the Following Items'\r\n      check \"#{num_bottles} bucket(s)\"\r\n      check \"#{num_bottles} funnel(s)\"\r\n      if media_type == :agar\r\n         flask_vol = media_vol * 2\r\n         check \"#{num_bottles} #{flask_vol} mL Erlenmeyer flask(s)\"\r\n      elsif media_type == :liquid\r\n         num_bottles = media_vol / 500\r\n         check \"#{num_bottles} 500 mL bottle(s)\"\r\n      end\r\n      ingredients.each do |reagent|\r\n        check reagent.name\r\n      end\r\n    end\r\n    \r\n    show do\r\n      title 'Measure Water'\r\n      note \"Use the DI water carboy or DI faucet at sink to add water up to the #{multiplier * 1000} mL mark in the bucket\"\r\n      note 'Place bucket filled with water on magnetic hotplater stirrer'\r\n    end\r\n    \r\n    # if bottle.include?('1 L Bottle')\r\n    show do\r\n      title 'Add Stir Bar'\r\n      check 'Retrieve 1 Medium Magnetic Stir Bar(s) from right hand drawer of weighing station or dishwashing station.'\r\n      check 'Add the stir bar(s) to the bucket(s).'\r\n      check 'Turn Stir dial to half way'\r\n    end\r\n    # end\r\n\r\n    ingredients.each do |reagent|\r\n      show do\r\n        title \"Add #{reagent}\"\r\n        if reagent.name.include? \"100x Dropout Solution\"\r\n            note \"Shake bottle very well\"\r\n            note \"Using a 10mL or bigger pipet will clog, so transfer \u003cb\u003e#{reagent.amount * multiplier}\u003c/b\u003e #{reagent.unit} of \u003cb\u003e#{reagent.name}\u003c/b\u003e to a sterile Falcon/Conical tube\"\r\n            note \"Continually keep shaking tube before you add it to the desired media\"\r\n            note \"add \u003cb\u003e#{reagent.amount * multiplier}\u003c/b\u003e #{reagent.unit} of \u003cb\u003e'#{reagent.name}'\u003c/b\u003e into each bucket.\"\r\n        else    \r\n            note \"Using the #{reagent.directions}, add \u003cb\u003e#{reagent.amount * multiplier}\u003c/b\u003e #{reagent.unit} of \u003cb\u003e#{reagent.name}'\u003c/b\u003e into each bucket.\"\r\n        end\r\n      end\r\n    end\r\n  end\r\n\r\n  def label_media_steps(media_type, multiplier, label, number, mix_note = 'Allow ingredients to mix for a few minutes. It is ok if a small amount of powder is not dissolved because the autoclave will dissolve it', water_note = 'DI water carboy or DI faucet at sink', label_note = '')\r\n\r\n    show do\r\n      title 'Mix Solution'\r\n      note mix_note.to_s\r\n    end\r\n\r\n    show do\r\n        title 'Transfer Solution'\r\n        if media_type == :liquid\r\n            check 'Place funnel into bottle'\r\n            check 'Pour solution up to 500 mL mark in bottle(s)'\r\n            check 'Put cap back on bottle(s) loosely'\r\n        elsif media_type == :agar\r\n            check 'Place funnel into Erlenmeyer flask(s)'\r\n            check 'Pour 1000 mL of solution into Erlenmeyer flask(s)'\r\n            check 'Loosely cover top of Erlenmeyer flask(s) with aluminum'\r\n        end\r\n    end\r\n\r\n    if media_type == :liquid\r\n        show do\r\n          title 'Label Media'\r\n          note \"Label the bottle(s) with '#{label}', 'Your initials', 'date', and '#{number}'\"\r\n          note label_note.to_s\r\n        end\r\n    end\r\n  end\r\n\r\n  def group_media(operations:)\r\n    media_to_make = Hash.new\r\n    operations.each do |op|\r\n      item = op.output('Media').item\r\n      sample_name = item.sample.name\r\n      container = item.object_type.name\r\n\r\n      key = \"#{container} #{sample_name}\"\r\n      if media_to_make[key].nil?\r\n        m = container.match(/(\\d+)\\s(\\w+)\\s(\\w+)/)\r\n        raise ProtocolError.new(message: 'Expect object type to indicate volume and Agar/Liquid') if m.nil?\r\n\r\n        vol_str, unit, state = m.captures\r\n        vol = vol_str.to_i\r\n        # bottle_volume = vol + vol / 4\r\n        bottle_volume = vol\r\n        # update for bucket\r\n        bottle = \"#{bottle_volume == 1000.0 ? '1 L' : \"#{bottle_volume} mL\"} Bottle\"\r\n        media_to_make[key] = Media.new(sample_name: sample_name, volume: vol, unit: unit, type: state.downcase.to_sym, bottle: bottle, count: 0, output: [])\r\n      end\r\n      media_to_make[key].count += 1\r\n      media_to_make[key].output.push(item.id)\r\n    end\r\n    media_to_make\r\n  end\r\n\r\n  def main\r\n    operations.retrieve(interactive: false)\r\n    operations.make\r\n\r\n    dry_units = 'gram'\r\n    dry_directions = 'gram scale, large weigh boat, and chemical spatula'\r\n    wet_units = 'ml'\r\n    wet_directions = 'serological pipette'\r\n    \r\n    sugars_hash = {\"Dex\" =\u003e \"Dextrose\", \"Gal\" =\u003e \"Galactose\", \"Gly\" =\u003e \"Glycerol\", \"Suc\" =\u003e \"Sucrose\"}\r\n\r\n    media_to_make = group_media(operations: operations)\r\n    media_to_make.each_value do |media|\r\n        # change to 1000\r\n      multiplier = media.volume / 1000.0\r\n      \r\n      ingredients = []\r\n      label = create_label(media: media)\r\n      mix_note = 'Allow ingredients to mix for a few minutes. It is ok if a small amount of powder is not dissolved because the autoclave will dissolve it'\r\n      water_note = 'DI water carboy or DI faucet at sink'\r\n      label_note = ''\r\n        \r\n      if media.sample_name.include?('LB')\r\n\r\n        ingredients.push(Ingredient.new(name: 'LB broth powder', amount: 20.0, unit: dry_units, directions: dry_directions))\r\n\r\n        # ingredients.push(Ingredient.new(name: 'Yeast Extract', amount: 5.0, unit: dry_units, directions: dry_directions))\r\n        # ingredients.push(Ingredient.new(name: 'Bacto Tryptone', amount: 10.0, unit: dry_units, directions: dry_directions))\r\n        # ingredients.push(Ingredient.new(name: 'NaCl (Sodium Chloride)', amount: 10.0, unit: dry_units, directions: dry_directions))\r\n        ingredients.push(Ingredient.new(name: 'Agar', amount: 20.0, unit: dry_units, directions: dry_directions)) if media.type == :agar\r\n\r\n    # 10mg Tetracycline - dissolve in 5 mL dH2O 50% EtOH\r\n    # -----------------------\r\n      \r\n        \r\n      elsif media.sample_name.include?(\"YEP\")\r\n        ingredients.push(Ingredient.new(name: 'Yeast Extract', amount: 10.0, unit: dry_units, directions: dry_directions))\r\n        ingredients.push(Ingredient.new(name: 'Bacto Peptone', amount: 20.0, unit: dry_units, directions: dry_directions))\r\n        ingredients.push(Ingredient.new(name: 'Adenine', amount: 0.12, unit: dry_units, directions: dry_directions))\r\n        ingredients.push(Ingredient.new(name: 'Uracil', amount: 0.06, unit: dry_units, directions: dry_directions))\r\n        \r\n        sugars_hash.each do |shorthand, sugar|\r\n            if media.sample_name.include?(shorthand)\r\n                ingredients.push(Ingredient.new(name: sugar, amount: 20.0, unit: dry_units, directions: dry_directions))\r\n            end\r\n        end\r\n        \r\n        ingredients.push(Ingredient.new(name: 'Agar', amount: 20.0, unit: dry_units, directions: dry_directions)) if media.type == :agar\r\n    \r\n    # adding G418: 200mg G418, 4 mL 1M Tris pH 8.0 - add when media cooled to 55C\r\n# -----------------------\r\n    # need to add drop media sample types ******\r\n        elsif media.sample_name.include?(\"Synthetic\")\r\n            ade = !media.sample_name.include?('-Ade')\r\n            his = !media.sample_name.include?('-His')\r\n            arg = !media.sample_name.include?('-Arg')\r\n            met = !media.sample_name.include?('-Met')\r\n            ura = !media.sample_name.include?('-Ura')\r\n            leu = !media.sample_name.include?('-Leu')\r\n            trp = !media.sample_name.include?('-Trp')\r\n            \r\n            ingredients.push(Ingredient.new(name: 'Yeast nitrogen base without amino acids', amount: 6.70, unit: dry_units, directions: dry_directions))\r\n            ingredients.push(Ingredient.new(name: '100x Dropout Solution', amount: 10, unit: wet_units, directions: wet_directions))\r\n\r\n            ingredients.push(Ingredient.new(name: 'Adenine powder', amount: 0.12, unit: dry_units, directions: dry_directions)) if ade\r\n            ingredients.push(Ingredient.new(name: 'Histidine powder', amount: 0.05, unit: dry_units, directions: dry_directions)) if his\r\n            ingredients.push(Ingredient.new(name: 'Arginine powder', amount: 0.05, unit: dry_units, directions: dry_directions)) if arg\r\n            ingredients.push(Ingredient.new(name: 'Methionine powder', amount: 0.05, unit: dry_units, directions: dry_directions)) if met\r\n            ingredients.push(Ingredient.new(name: 'Uracil powder', amount: 0.05, unit: dry_units, directions: dry_directions)) if ura\r\n            ingredients.push(Ingredient.new(name: 'Leucine powder', amount: 0.05, unit: dry_units, directions: dry_directions)) if leu\r\n            ingredients.push(Ingredient.new(name: 'Tryptophan powder', amount: 0.05, unit: dry_units, directions: dry_directions)) if trp\r\n            \r\n            sugars_hash.each do |shorthand, sugar|\r\n                if media.sample_name.include?(shorthand)\r\n                    ingredients.push(Ingredient.new(name: sugar, amount: 20.0, unit: dry_units, directions: dry_directions))\r\n                end\r\n            end\r\n            \r\n            ingredients.push(Ingredient.new(name: 'Agar', amount: 20.0, unit: dry_units, directions: dry_directions)) if media.type == :agar\r\n\r\n        end\r\n\r\n        make_media_steps(media_type: media.type, media_vol: media.volume, bottle: media.bottle, num_bottles: media.count, multiplier: multiplier, ingredients: ingredients) \r\n        label_media_steps(media.type, multiplier, label, media.output, mix_note, water_note, label_note)\r\n    end\r\n  end\r\n\r\n  def create_label(media:)\r\n    if media.sample_name.include?(\"Synthetic\")\r\n      label = 'Synthetic'\r\n      label += ' +Gal' if media.sample_name.include?('Gal')\r\n      label += ' +Dex' if media.sample_name.include?('Dex')\r\n      label += ' +Gly' if media.sample_name.include?('Gly')\r\n      label += ' +Suc' if media.sample_name.include?('Suc')\r\n      label += ' -Ade' if media.sample_name.include?('-Ade')\r\n      label += ' -His' if media.sample_name.include?('-His')\r\n      label += ' -Arg' if media.sample_name.include?('-Arg')\r\n      label += ' -Met' if media.sample_name.include?('-Met')\r\n      label += ' -Ura' if media.sample_name.include?('-Ura')\r\n      label += ' -Leu' if media.sample_name.include?('-Leu')\r\n      label += ' -Trp' if media.sample_name.include?('-Trp')\r\n        \r\n    elsif media.sample_name.include?(\"YEP\")\r\n        label = 'YEP'\r\n        label += ' +Gal' if media.sample_name.include?('Gal')\r\n        label += ' +Dex' if media.sample_name.include?('Dex')\r\n        label += ' +Gly' if media.sample_name.include?('Gly')\r\n        label += ' +Suc' if media.sample_name.include?('Suc')\r\n    \r\n    elsif media.sample_name.include?('LB')\r\n      \"LB #{media.type.to_s.capitalize}\"\r\n\r\n    end\r\n  end\r\nend\r\n\r\n","precondition":"def precondition(op)\n  true\nend","cost_model":"def cost(op)\n  { labor: 0, materials: 0 }\nend","documentation":"Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.","test":"# frozen_string_literal: true\n\nclass ProtocolTest \u003c ProtocolTestBase\n  def setup\n\n    media_list = []\n    # TODO: check for liquid vs agar\n    media_list.push(media_sample(name: '10% Glycerol', description: '10% Glycerol for making electrocompetent E. coli'))\n    log('setup2')\n    #media_list.push(media_sample(name: 'SOB', description: 'Recovery media for E. coli transformations, media for comp cell protocols'))\n    #media_list.push(media_sample(name: 'SOC', description: 'Recovery media for E. coli transformations'))\n    #media_list.push(media_sample(name: 'LB', description: 'LB'))\n    #media_list.push(media_sample(name: 'TB', description: 'TB'))\n    #media_list.push(media_sample(name: 'YPAD', description: 'YPAD'))\n    #media_list.push(media_sample(name: 'YPAD + 1M Sorbitol', description: 'YPAD rich, fast growing media with 1M Sorbitol'))\n\n\n    media_list.each do |media|\n      add_operation.with_output('Media', media)\n    end\n    log('setup3')\n  end\n\n  def analyze\n    assert_equal(@backtrace.last[:operation], 'complete')\n    #get_plates_display = find_display_by_title('Get fresh agar plates')\n    #refute_nil(get_plates_display, 'Missing first screen')\n    #assert_equal(get_plates_display[:content][1], {check: 'Please get 1 agar plate'})\n  end\n\n  private\n\n  def media_sample(name:, description:, user: nil)\n    sample(\n      name: name,\n      description: description,\n      user: user,\n      type_name: 'Media',\n      attributes: []\n    )\n  end\n\n  def sample(name:, description:, user: nil, type_name:, attributes:)\n    sample_type = sample_type(type_name: type_name)\n    return nil if sample_type.nil?\n\n    user = User.all.last if user.nil?\n    Sample.creator(\n      {\n        sample_type_id: sample_type.id,\n        description: description,\n        name: name,\n        project: 'Testing',\n        field_values: attributes\n      },\n      user\n    )\n  end\n\n  def sample_type(type_name:, description: 'test type', definition: nil)\n    sample_type = SampleType.find_by(name: type_name)\n    return sample_type unless sample_type.nil?\n\n    SampleType.create_from_raw(\n      name: type_name,\n      description: description,\n      field_types: definition\n    )\n  end\nend\n","timing":null}}]}